enum EventType {
	MESSAGE
	USER_FOLLOW
	ANIME_FOLLOW
	MEDIA_WATCH
}

interface Event {
	id: ID!
	user: User! @link(collection: "users")
	date: Date!
	type: EventType!
}

type MessageEvent implements Event {
	id: ID!
	user: User!
	date: Date!
	type: EventType!
	message: String!
}

type UserFollowEvent implements Event {
	id: ID!
	user: User!
	date: Date!
	type: EventType!
	follow: User! @link(collection: "users")
}

type AnimeFollowEvent implements Event {
	id: ID!
	user: User!
	date: Date!
	type: EventType!
	anime: Anime! @link(collection: "animes", objectId: false)
}

type MediaWatchEvent implements Event {
	id: ID!
	user: User!
	date: Date!
	type: EventType!
	media: IMedia! @link(collection: "medias")
}

extend type Query {
	events(user: ID): [Event]!
}

extend type Mutation {
	messageEvent(message: String!): ID!
}
