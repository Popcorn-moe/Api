interface Notification {
    id: ID!
    date: Date!
    user: User!
    type: NotifType
}

enum NotifType {
    MESSAGE
    ANIME_FOLLOW
    FRIEND_REQUEST
    ROOM_INVITE
}

type NotifMessageContent implements Notification {
    id: ID!
    date: Date!
    user: User!
    type: NotifType
    message: String!
}

type NotifAnimeFollowContent implements Notification {
    id: ID!
    date: Date!
    user: User!
    type: NotifType
    anime: Anime!
}

type NotifFriendRequestContent implements Notification {
    id: ID!
    date: Date!
    user: User!
    type: NotifType
    _from: User!
}

extend type Mutation {
    acceptFriendRequest(notif: ID!): Result!
    refuseFriendRequest(notif: ID!): Result!
    notifyMessage(user: ID!, message: String!): ID!
    notifyAnimeFollow(user: ID!, anime: ID!): ID!
    notifyFriendRequest(user: ID!, _from: ID!): ID!
}

extend type Query {
    getNotifications(user: ID!): [Notification!]!
}

extend type Subscription {
    notification: Notification
}
