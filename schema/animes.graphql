type Cover {
	# 150x210
	normal: Url
	# 600x840
	big: Url
}

type Anime implements Dated {
	id: ID!
	names: [String!]!
	authors: [Author!]! @link(collection: "authors")
	tags: [Tag!]! @link(collection: "tags")
	status: AnimeStatus
	medias: [Media!]! @link(collection: "medias")
	seasons: [Season]!
	season(season: Int!): Season
	addSeason(season: SeasonInput!): Season!
	cover: Cover!
	background: Url
	desc: String

	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
}

type Season implements Dated {
	anime: ID!
	name: String!
	episodes: [Episode!]! @link(collection: "medias")
	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
	# addEpisode(media: ID = null, episode: Int!): ID!
}

enum AnimeStatus {
	PENDING
	FINISHED
	NOT_STARTED
}

extend type Query {
	animes(limit: Int, sort: Sort = NONE): [Anime!]
	anime(id: ID!): Anime
	searchAnime(name: String!, limit: Int = 10): [Anime!]!
	searchAnimes(
		limit: Int = 50
		skip: Int = 0
		name: String
		order_by: String
		status: AnimeStatus
		type: MediaType
		authors: [ID]
		year: Int
		tags: [ID!]
	): [Anime!]!
	lastEpisodes(limit: Int = 50): [IMedia!]!
	lastTrailers(limit: Int = 50): [IMedia!]!
}

input AnimeInput {
	names: [String!]
	authors: [ID!]
	tags: [ID!]
	status: AnimeStatus
	cover: Upload
	background: Upload
	desc: String
	release_date: DateTime
}

input SeasonInput {
	season: Int!
	name: String!
	release_date: DateTime
}

extend type Mutation {
	addAnime(anime: AnimeInput!): ID! @auth(requires: ADMIN)
	updateAnime(id: ID!, anime: AnimeInput!): ID! @auth(requires: ADMIN)
	addSeason(anime: ID!, season: SeasonInput!): Season! @auth(requires: ADMIN)
}
