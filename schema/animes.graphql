type Anime implements Dated {
	id: ID!
	names: [String!]!
	authors: [Author!]!
	tags: [Tag!]!
	status: AnimeStatus
	medias: [Media!]!
	seasons: [Season]!
	season(season: Int!): Season
	addSeason(season: SeasonInput!): Season!
	cover: Url
	background: Url

	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
}

type Season implements Dated {
	anime: ID!
	name: String!
	episodes: [Media!]!
	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
	# addEpisode(media: ID = null, episode: Int!): ID!
}

enum AnimeStatus {
	PENDING
	FINISHED
	NOT_STARTED
}

extend type Query {
	animes(limit: Int, sort: Sort = NONE): [Anime!]
	anime(id: ID!): Anime
	searchAnime(name: String!, limit: Int = 10): [Anime!]!
	searchAnimes(limit: Int = 50, skip: Int = 0, name: String, order_by: String, status: AnimeStatus, type: MediaType, authors: [ID], year: Int, tags: [ID!]): [Anime!]!
}

input AnimeInput {
	names: [String!]
	authors: [ID!]
	tags: [ID!]
	status: AnimeStatus
	cover: Upload
	background: Upload
	desc: String
	release_date: DateTime
}

input SeasonInput {
	season: Int!
	name: String!
	release_date: DateTime
}

extend type Mutation {
	addAnime(anime: AnimeInput!): ID!
	updateAnime(id: ID!, anime: AnimeInput!): ID!
	addSeason(anime: ID!, season: SeasonInput!): Season!

}
