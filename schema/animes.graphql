type Anime implements Dated {
	id: ID!
	names: [String!]!
	authors: [Author!]!
	tags: [Tag!]!
	status: AnimeStatus
	medias: [Media!]!
	season: [Season!]!
	cover: Url
	background: Url

	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
}

enum AnimeStatus {
	PENDING
	FINISHED
	NOT_STARTED
}

type Author {
	id: ID!
	name: String!
	picture: Url
	bio: String!
	organisation: Boolean!
	animes(limit: Int, sort: Sort): [Anime!]!
}

type Tag {
	id: ID!
	name: String!
	desc: String!
	color: String!
}

extend type Query {
	authors: [Author!]!
	tags: [Tag!]!
	animes(limit: Int, sort: Sort = NONE): [Anime!]
	author(id: ID!): Author
	anime(id: ID!): Anime
	tag(id: ID!): Tag
}

input AnimeInput {
	names: [String!]
	authors: [ID!]
	tags: [ID!]
	status: AnimeStatus
	medias: [ID!]
	season: [ID!]
	cover: Upload
	background: Upload
	desc: String
	release_date: DateTime
}

input TagInput {
	name: String!
	desc: String!
	color: String!
}

input TagUpdate {
	name: String
	desc: String
	color: String
}

input AuthorInput {
	name: String!
	picture: Upload
	bio: String!
	organisation: Boolean!
}

input AuthorUpdate {
	name: String
	picture: Upload
	bio: String
	organisation: Boolean
}

extend type Mutation {
	addAnime(anime: AnimeInput!): ID!
	updateAnime(id: ID!, anime: AnimeInput!): ID!
	addTag(tag: TagInput!): ID!
	updateTag(id: ID!, tag: TagUpdate!): ID!
	deleteTag(id: ID!): ID!
	addAuthor(author: AuthorInput!): ID!
	updateAuthor(id: ID!, author: AuthorUpdate!): ID!
	deleteAuthor(id: ID!): ID!
}
