type DiscordAccount {
	id: ID!
	username: String!
	discriminator: String!
}

type TwitterAccount {
	id: ID!
	username: String!
}

type User {
	id: ID!
	login: String!
	email: String @auth(requires: ADMIN, error: false, allowIsMe: true)
	group: UserGroup!
	newsletter: Boolean!
	account_registered: Boolean!
	avatar: Url
	background: Url
	ratings: [AnimeRating!]!
	rating_for(id: ID!): AnimeRating
	blocked: [User!]! @link(collection: "users")
	follows: [User!]! @link(collection: "users")
	followers: [User!]!
	notifications: [Notification!]!
	isFollower(id: ID!): Boolean!

	meta(anime: ID!): Meta
	metas: [Meta!]

	animeFollows: [Anime!]! @link(collection: "animes", objectId: false)

	# SSO

	discord: DiscordAccount @auth(requires: ADMIN, error: false, allowIsMe: true)
	twitter: TwitterAccount @auth(requires: ADMIN, error: false, allowIsMe: true)
}

enum MetaAnimeStatus {
	WATCHING
	COMPLETED
	ON_HOLD
	WANT_TO_WATCH
	DROPPED
}

type Meta {
	anime: Anime! @link(collection: "animes", objectId: false)
	status: MetaAnimeStatus
}

input MetaInput {
	status: MetaAnimeStatus
}

enum UserGroup {
	ADMIN
	MODERATOR
	VIEWER
}

type AnimeRating {
	anime: Anime!
	rating: Float!
}

input UserInput {
	id: ID!
	login: String
	email: String
	group: UserGroup
	newsletter: Boolean
	account_registered: Boolean
	avatar: Url
}

extend type Mutation {
	setAvatar(file: Upload!): Result! @auth
	setBackground(file: Upload!): Result! @auth
	updateMeta(anime: ID!, meta: MetaInput!): Meta @auth
	updateUsers(users: [UserInput!]!): [ID!]! @auth(requires: ADMIN)
	blockUser(user: ID!): Boolean
	unlockUser(user: ID!): Boolean
	follow(id: ID!): Boolean! @auth
	unfollow(id: ID!): Boolean! @auth
	followAnime(anime: ID!): Boolean @auth
	unfollowAnime(anime: ID!): Boolean @auth
}

extend type Query {
	me: User
	users: [User!]!
	user(name: String!): User!
	userById(id: ID!): User!
	searchUser(name: String!, limit: Int = 10): [User!]!
}
