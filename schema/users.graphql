type User {
	id: ID!
	login: String!
	email: String @hasGroup(group: ADMIN)
	group: UserGroup!
	newsletter: Boolean!
	account_registered: Boolean!
	playlists: [Playlist!]!
	avatar: Url
	ratings: [AnimeRating!]!
	rating_for(id: ID!): AnimeRating
	friends: [User!]!
	blocked: [User!]!
	notifications: [Notification!]!
}

enum UserGroup {
	ADMIN
	MODERATOR
	VIEWER
}

type AnimeRating {
	anime: Anime!
	rating: Float!
}

input UserInput {
	id: ID!
	login: String
	email: String
	group: UserGroup
	newsletter: Boolean
	account_registered: Boolean
	avatar: Url
}

extend type Mutation {
	setAvatar(file: Upload!): Result!
	updateUsers(users: [UserInput!]!): [ID!]!
	acceptFriendRequest(notif: ID!): Result!
	sendFriendsRequests(to: [ID!]!): [ID!]!
	delFriend(friend: ID!): Boolean
	blockUser(user: ID!): Boolean
	unlockUser(user: ID!): Boolean
}

extend type Query {
	me: User
	users: [User!]!
	user(name: String!): User!
	userById(id: ID!): User!
	searchUser(name: String!, limit: Int = 10): [User!]!
	friendRequests: [NotifFriendRequestContent!]!
	pendingFriendRequests: [NotifFriendRequestContent!]!
}
