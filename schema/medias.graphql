interface IMedia {
	id: ID!
	anime: Anime! @link(collection: "animes", objectId: false)
	name: String
	type: MediaType!
	rate: Float!
	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
	content: String
	comments_count: Int
	comments(limit: Int = 50, offset: Int = 0): [Comment!]!
	comment(content: String!): Comment! @auth
	linkTo(anime: ID!, season: Int = null, episode: Int = null): Boolean!
		@auth(group: ADMIN)
}

type Media implements IMedia {
	id: ID!
	anime: Anime!
	name: String
	type: MediaType!
	rate: Float!
	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
	content: String
	comments_count: Int
	comments(limit: Int = 50, offset: Int = 0): [Comment!]!
	comment(content: String!): Comment!
	linkTo(anime: ID!, season: Int = null, episode: Int = null): Boolean!
}

type Episode implements IMedia {
	id: ID!
	anime: Anime!
	name: String
	type: MediaType!
	rate: Float!
	release_date: DateTime
	edit_date: DateTime!
	posted_date: DateTime!
	content: String
	comments_count: Int
	comments(limit: Int = 50, offset: Int = 0): [Comment!]!
	comment(content: String!): Comment!
	linkTo(anime: ID!, season: Int = null, episode: Int = null): Boolean!
	episode: Int
	season: Int
}

enum MediaType {
	EPISODE
	TRAILER
	OPENING
	ENDING
	OST
	FILM
}

input MediaInput {
	name: String
	type: MediaType!
	release_date: DateTime
	content: String
}

input MediaUpdate {
	name: String
	type: MediaType
	release_date: DateTime
	content: String
}

extend type Query {
	media(media: ID, anime: ID, episode: Int, season: Int): IMedia
}

extend type Mutation {
	addMedia(media: MediaInput!): IMedia! @auth(requires: ADMIN)
	updateMedia(id: ID!, media: MediaUpdate!): ID! @auth(requires: ADMIN)
	linkMedia(
		media: ID!
		anime: ID!
		season: Int = null
		episode: Int = null
	): Boolean! @auth(requires: ADMIN)
	deleteMedia(id: ID!): ID! @auth(requires: ADMIN)
}
